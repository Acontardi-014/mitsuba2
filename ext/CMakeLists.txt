# Add a CMake parameter for choosing a desired Python version
set(MTS_PYTHON_VERSION "" CACHE STRING "Python version to use for compiling the mitsuba-python library")

if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/openexr/OpenEXR")
  message(FATAL_ERROR "The Mitsuba dependencies are missing! "
    "You probably did not clone the project with --recursive. It is possible to recover "
    "by calling \"git submodule update --init --recursive\"")
endif()

# Try to autodetect Python (can be overridden manually if needed)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/pybind11/tools")
set(Python_ADDITIONAL_VERSIONS 3.4 3.5 3.6 3.7)
find_package(PythonLibsNew ${MTS_PYTHON_VERSION})

# Find a matching Python interpreter
if (PYTHONLIBS_FOUND)
  set(PYBIND11_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/pybind11/include ${PYTHON_INCLUDE_DIR} PARENT_SCOPE)
  message(STATUS "Mitsuba: building the Python plugin.")
else()
  message(WARNING "Mitsuba: not building the Python plugin! (won't be able to run the test suite)")
endif()
set(PYTHONLIBS_FOUND ${PYTHONLIBS_FOUND} PARENT_SCOPE)
set(PYTHON_MODULE_PREFIX "${PYTHON_MODULE_PREFIX}" PARENT_SCOPE)
set(PYTHON_MODULE_EXTENSION "${PYTHON_MODULE_EXTENSION}" PARENT_SCOPE)
set(PYTHON_LIBRARIES "${PYTHON_LIBRARIES}" PARENT_SCOPE)

# Build nanogui
set(NANOGUI_BUILD_EXAMPLES OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_SHARED   ON  CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON   ON  CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL        OFF CACHE BOOL " " FORCE)
set(NANOGUI_PYBIND11_DIR   "${CMAKE_CURRENT_SOURCE_DIR}/pybind11" CACHE BOOL " " FORCE)
set(NANOGUI_ENOKI_DIR      "${CMAKE_CURRENT_SOURCE_DIR}/enoki" CACHE BOOL " " FORCE)
add_subdirectory(nanogui)

# Run the Enoki CMake script and update the compilation flags
add_subdirectory(enoki)
enoki_set_compile_flags()
enoki_set_native_flags()
get_directory_property(ENOKI_COMPILE_OPTIONS     COMPILE_OPTIONS)
get_directory_property(ENOKI_COMPILE_DEFINITIONS COMPILE_DEFINITIONS)
set_property(DIRECTORY .. PROPERTY COMPILE_OPTIONS     ${ENOKI_COMPILE_OPTIONS})
set_property(DIRECTORY .. PROPERTY COMPILE_DEFINITIONS ${ENOKI_COMPILE_DEFINITIONS})
set(ENOKI_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/enoki/include PARENT_SCOPE)
set(CMAKE_CXX_STANDARD_LIBRARIES ${CMAKE_CXX_STANDARD_LIBRARIES} PARENT_SCOPE)
set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} PARENT_SCOPE)
set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} PARENT_SCOPE)

if (WIN32)
  # Build zlib (only on Windows)
  set(ZLIB_BUILD_STATIC_LIBS OFF CACHE BOOL " " FORCE)
  set(ZLIB_BUILD_SHARED_LIBS ON CACHE BOOL " " FORCE)
  add_subdirectory(zlib)

  set(ZLIB_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/zlib;${CMAKE_CURRENT_BINARY_DIR}/zlib" CACHE PATH " " FORCE)
  set(ZLIB_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/zlib/$<CONFIGURATION>/zlib.lib" CACHE FILEPATH " " FORCE)

  set_property(TARGET zlib PROPERTY FOLDER "dependencies")
  include_directories(${ZLIB_INCLUDE_DIR} "${CMAKE_CURRENT_BINARY_DIR}/zlib")

endif()

if (WIN32 OR APPLE)
  # Build libpng 1.6 (on Windows & MacOS)
  set(PNG_SHARED ON CACHE BOOL " " FORCE)
  set(PNG_STATIC OFF CACHE BOOL " " FORCE)
  set(PNG_TESTS OFF CACHE BOOL " " FORCE)
  set(PNG_SKIP_INSTALL_ALL TRUE)
  add_subdirectory(libpng)
  set_property(TARGET png16 PROPERTY FOLDER "dependencies")

  if (WIN32)
    add_dependencies(png16 zlib)
  endif()

  set(PNG_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/libpng;${CMAKE_CURRENT_BINARY_DIR}/libpng" PARENT_SCOPE)
  set(PNG_LIBRARIES    "$<TARGET_LINKER_FILE:png16>" PARENT_SCOPE)
  set(PNG_DEFINES      -DMTS_HAS_LIBPNG PARENT_SCOPE)

  # Build libjpeg 7 (on Windows & MacOS)
  set(LIBJPEG_BUILD_SHARED ON CACHE BOOL " " FORCE)
  set(LIBJPEG_BUILD_EXECUTABLES OFF CACHE BOOL " " FORCE)
  add_subdirectory(libjpeg)
  set_property(TARGET jpeg PROPERTY FOLDER "dependencies")
  set(JPEG_LIBRARIES libjpeg PARENT_SCOPE)

  set(JPEG_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/libjpeg;${CMAKE_CURRENT_BINARY_DIR}/libjpeg" PARENT_SCOPE)
  set(JPEG_LIBRARIES    "$<TARGET_LINKER_FILE:jpeg>" PARENT_SCOPE)
  set(JPEG_DEFINES      -DMTS_HAS_LIBJPEG PARENT_SCOPE)

  # Give libpng & libjpeg a name that's guaranteeed not to match other
  # libraries that may already be loaded (e.g. into a Python interpreter)
  set_property(TARGET png16 PROPERTY OUTPUT_NAME "png16-mitsuba")
  set_property(TARGET jpeg PROPERTY OUTPUT_NAME "jpeg-mitsuba")
else()
  # Find system libpng
  find_package(PNG REQUIRED)
  set(PNG_LIBRARIES    ${PNG_LIBRARIES} PARENT_SCOPE)
  set(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRS} PARENT_SCOPE)

  # Find system libjpeg
  find_package(JPEG)
  if (JPEG_FOUND)
    set(JPEG_LIBRARIES    ${JPEG_LIBRARIES} PARENT_SCOPE)
    set(JPEG_INCLUDE_DIRS ${JPEG_INCLUDE_DIRS} PARENT_SCOPE)
    set(JPEG_DEFINES      -DMTS_HAS_LIBJPEG PARENT_SCOPE)
  endif()
endif()

# Build OpenEXR
set(ILMBASE_NAMESPACE_VERSIONING OFF CACHE BOOL " " FORCE)
set(OPENEXR_NAMESPACE_VERSIONING OFF CACHE BOOL " " FORCE)
add_subdirectory(openexr)
set_property(TARGET
  IexMath eLut toFloat b44ExpLogTable dwaLookups
  CopyIlmBaseLibs IlmThread Half Iex Imath IlmImf IlmImf-obj
  PROPERTY FOLDER "dependencies")

if (WIN32)
  add_dependencies(IlmImf zlib)
endif()

set(OPENEXR_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/IlmBase/Imath
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/IlmBase/Imath
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/IlmBase/Imath
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/IlmBase/Iex
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/IlmBase/Half
  ${CMAKE_CURRENT_SOURCE_DIR}/openexr/OpenEXR/IlmImf
  ${CMAKE_CURRENT_BINARY_DIR}/openexr/OpenEXR/config
  ${CMAKE_CURRENT_BINARY_DIR}/openexr/IlmBase/config
  PARENT_SCOPE
)

# Use install rpath from this point onwards
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

# Build Thread Building Blocks (main shared libraries only)
set(TBB_BUILD_SHARED          ON  CACHE BOOL " " FORCE)
set(TBB_BUILD_STATIC          OFF CACHE BOOL " " FORCE)
set(TBB_BUILD_TESTS           OFF CACHE BOOL " " FORCE)
set(TBB_BUILD_TBBMALLOC       OFF CACHE BOOL " " FORCE)
set(TBB_BUILD_TBBMALLOC_PROXY OFF CACHE BOOL " " FORCE)
add_subdirectory(tbb)
set_property(TARGET tbb tbb_def_files PROPERTY FOLDER "dependencies")
set(TBB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/tbb/include PARENT_SCOPE)

set_property(TARGET glfw glfw_objects nanogui nanogui-obj PROPERTY FOLDER "dependencies")
set(EIGEN_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/nanogui/ext/eigen PARENT_SCOPE)
set(NANOGUI_INCLUDE_DIRS
   ${CMAKE_CURRENT_SOURCE_DIR}/nanogui/include
   ${NANOGUI_EXTRA_INCS}
   PARENT_SCOPE)
set(NANOGUI_EXTRA_DEFS ${NANOGUI_EXTRA_DEFS} PARENT_SCOPE)

if (PYTHONLIBS_FOUND)
  set_target_properties(nanogui-python nanogui-python-obj PROPERTIES FOLDER "dependencies")
endif()

# Build the pugixml parser
add_library(pugixml SHARED pugixml/src/pugixml.cpp)
set_property(TARGET pugixml PROPERTY
  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/pugixml")
set_property(TARGET pugixml PROPERTY FOLDER "dependencies")
set(PUGIXML_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/pugixml/src PARENT_SCOPE)
set_property(SOURCE pugixml/src/pugixml.cpp
  APPEND PROPERTY COMPILE_DEFINITIONS PUGIXML_BUILD_DLL)

# Build ZeroMQ
set(WITH_SODIUM OFF CACHE BOOL " " FORCE)
set(WITH_TWEETNACL OFF CACHE BOOL " " FORCE)
set(WITH_DOC OFF  CACHE BOOL " " FORCE)
set(ZMQ_BUILD_FRAMEWORK OFF CACHE BOOL " " FORCE)
set(ZMQ_BUILD_TESTS OFF CACHE BOOL " " FORCE)
set(LIBZMQ_PEDANTIC OFF CACHE BOOL " " FORCE)
add_subdirectory(zeromq)
set_property(TARGET libzmq PROPERTY FOLDER "dependencies")

# tinyformat include path
set(TINYFORMAT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/tinyformat PARENT_SCOPE)

if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64|AMD64")
  # Build asmjit
  set(ASMJIT_BUILD_X64 TRUE)
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override -Wno-undefined-inline")
  endif()
  add_subdirectory(asmjit)
  set(ASMJIT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/asmjit/src PARENT_SCOPE)
  set_property(TARGET asmjit PROPERTY FOLDER "dependencies")
  if (MSVC)
    target_compile_options(asmjit PRIVATE "/wd4804" "/wd4838")
  endif()
endif()

if (MTS_ENABLE_ITTNOTIFY)
  add_subdirectory(IntelSEAPI/ittnotify)
  set(ITT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/IntelSEAPI/ittnotify/include PARENT_SCOPE)
  set_property(TARGET ittnotify PROPERTY FOLDER "dependencies")
endif()

mark_as_advanced(
  ENABLE_CPACK ENABLE_CURVE ENABLE_DRAFTS ENABLE_EVENTFD GLFW_BUILD_DOCS
  GLFW_BUILD_EXAMPLES GLFW_BUILD_INSTALL GLFW_BUILD_TESTS
  GLFW_DOCUMENT_INTERNALS GLFW_INSTALL GLFW_USE_CHDIR GLFW_USE_MENUBAR
  GLFW_USE_RETINA ILMBASE_BUILD_SHARED_LIBS ILMBASE_NAMESPACE_VERSIONING
  ILMIMF_BUILD_TESTS ILMIMF_CREATE_LIBTOOL_FILE ILMIMF_INSTALL_PKGCONFIG
  LIBZMQ_PEDANTIC LIBZMQ_WERROR LIB_SUFFIX NANOGUI_BUILD_EXAMPLES
  NANOGUI_USE_GLES2 NANOGUI_USE_OPENGL NANOGUI_BUILD_PYTHON
  NANOGUI_BUILD_SHARED NANOGUI_INSTALL NANOGUI_PYTHON_VERSION NANOGUI_USE_GLAD
  OPENEXR_BUILD_EXAMPLES OPENEXR_BUILD_SHARED_LIBS OPENEXR_BUILD_TESTS
  OPENEXR_BUILD_UTILS OPENEXR_INSTALL_DOCS OPENEXR_INSTALL_EXAMPLES
  OPENEXR_NAMESPACE_VERSIONING OPENEXR_USE_ZLIB_WINAPI POLLER RT_LIBRARY
  TBB_BUILD_SHARED TBB_BUILD_STATIC TBB_BUILD_TBBMALLOC
  TBB_BUILD_TBBMALLOC_PROXY TBB_BUILD_TESTS WITH_LIBSODIUM WITH_MILITANT
  WITH_OPENPGM WITH_PERF_TOOL WITH_SODIUM BUILD_SHARED_LIBS WITH_TWEETNACL
  WITH_VMCI ZEROMQ_BUILD_STATIC ZEROMQ_CMAKECONFIG_INSTALL_DIR ZEROMQ_INSTALL
  ZEROMQ_LIBRARY ZMQ_BUILD_FRAMEWORK ZMQ_BUILD_TESTS SODIUM_FOUND
  ZEROMQ_BUILD_PERTOOLS cocoa_library corevideo_library iokit_library
  opengl_library ENOKI_TEST CMAKE_OSX_ARCHITECTURES CMAKE_OSX_DEPLOYMENT_TARGET
  CMAKE_OSX_SYSROOT CMAKE_BACKWARDS_COMPATIBILITY EXECUTABLE_OUTPUT_PATH
  LIBJPEG_BUILD_EXECUTABLES LIBJPEG_BUILD_SHARED LIBRARY_OUTPUT_PATH M_LIBRARY
  PNGARG PNG_DEBUG PNG_FRAMEWORK PNG_SHARED PNG_STATIC PNG_TESTS GLFW_USE_MIR
  ASMJIT_BUILD_ARM ASMJIT_BUILD_TEST ASMJIT_BUILD_X86 ASMJIT_DIR ASMJIT_EMBED
  ASMJIT_STATIC TBB_CI_BUILD
)
