//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24817639
// Cuda compilation tools, release 10.0, V10.0.130
// Based on LLVM 3.4svn
//

.version 6.3
.target sm_70
.address_size 64

	// .globl	_Z15ray_gen_closestv
.global .align 4 .b8 top_object[4];
.global .align 8 .u64 shape_ptr;
.global .align 4 .u32 launch_index;
.global .align 4 .b8 p[12];
.global .align 8 .b8 uv[8];
.global .align 4 .b8 ns[12];
.global .align 4 .b8 ng[12];
.global .align 4 .b8 dp_du[12];
.global .align 4 .b8 dp_dv[12];
.global .align 4 .b8 ray[36];
.global .align 1 .b8 in_mask[1];
.global .align 1 .b8 in_ox[1];
.global .align 1 .b8 in_oy[1];
.global .align 1 .b8 in_oz[1];
.global .align 1 .b8 in_dx[1];
.global .align 1 .b8 in_dy[1];
.global .align 1 .b8 in_dz[1];
.global .align 1 .b8 in_mint[1];
.global .align 1 .b8 in_maxt[1];
.global .align 1 .b8 out_t[1];
.global .align 1 .b8 out_u[1];
.global .align 1 .b8 out_v[1];
.global .align 1 .b8 out_ng_x[1];
.global .align 1 .b8 out_ng_y[1];
.global .align 1 .b8 out_ng_z[1];
.global .align 1 .b8 out_ns_x[1];
.global .align 1 .b8 out_ns_y[1];
.global .align 1 .b8 out_ns_z[1];
.global .align 1 .b8 out_p_x[1];
.global .align 1 .b8 out_p_y[1];
.global .align 1 .b8 out_p_z[1];
.global .align 1 .b8 out_dp_du_x[1];
.global .align 1 .b8 out_dp_du_y[1];
.global .align 1 .b8 out_dp_du_z[1];
.global .align 1 .b8 out_dp_dv_x[1];
.global .align 1 .b8 out_dp_dv_y[1];
.global .align 1 .b8 out_dp_dv_z[1];
.global .align 1 .b8 out_shape_ptr[1];
.global .align 1 .b8 out_primitive_id[1];
.global .align 1 .b8 out_hit[1];
.global .align 1 .b8 prd[1];
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9shape_ptrE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo1pE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2uvE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2nsE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2ngE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5dp_duE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5dp_dvE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3prdE[8] = {82, 97, 121, 0, 1, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9shape_ptrE[19] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename1pE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2uvE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2nsE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2ngE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5dp_duE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5dp_dvE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[4] = {82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3prdE[11] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9shape_ptrE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum1pE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2uvE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2nsE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2ngE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5dp_duE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5dp_dvE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3prdE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9shape_ptrE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic1pE[12] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 112, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2uvE[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 117, 118, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2nsE[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 115, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2ngE[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 103, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic5dp_duE[16] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 100, 112, 95, 100, 117, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic5dp_dvE[16] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 100, 112, 95, 100, 118, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3prdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9shape_ptrE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation1pE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2uvE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2nsE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2ngE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5dp_duE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5dp_dvE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3prdE[1];

.visible .entry _Z15ray_gen_closestv(

)
{
	.local .align 1 .b8 	__local_depot0[1];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<79>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.global.u32 	%rd3, [launch_index];
	mov.u64 	%rd55, in_ox;
	cvta.global.u64 	%rd2, %rd55;
	mov.u32 	%r18, 1;
	mov.u32 	%r16, 4;
	mov.u64 	%rd54, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r18, %r16, %rd3, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f1, [%rd1];
	ld.global.u32 	%rd9, [launch_index];
	mov.u64 	%rd56, in_oy;
	cvta.global.u64 	%rd8, %rd56;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r18, %r16, %rd9, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f2, [%rd7];
	ld.global.u32 	%rd15, [launch_index];
	mov.u64 	%rd57, in_oz;
	cvta.global.u64 	%rd14, %rd57;
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd14, %r18, %r16, %rd15, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f3, [%rd13];
	ld.global.u32 	%rd21, [launch_index];
	mov.u64 	%rd58, in_dx;
	cvta.global.u64 	%rd20, %rd58;
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd20, %r18, %r16, %rd21, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f4, [%rd19];
	ld.global.u32 	%rd27, [launch_index];
	mov.u64 	%rd59, in_dy;
	cvta.global.u64 	%rd26, %rd59;
	// inline asm
	call (%rd25), _rt_buffer_get_64, (%rd26, %r18, %r16, %rd27, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f5, [%rd25];
	ld.global.u32 	%rd33, [launch_index];
	mov.u64 	%rd60, in_dz;
	cvta.global.u64 	%rd32, %rd60;
	// inline asm
	call (%rd31), _rt_buffer_get_64, (%rd32, %r18, %r16, %rd33, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f6, [%rd31];
	ld.global.u32 	%rd39, [launch_index];
	mov.u64 	%rd61, in_mint;
	cvta.global.u64 	%rd38, %rd61;
	// inline asm
	call (%rd37), _rt_buffer_get_64, (%rd38, %r18, %r16, %rd39, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f7, [%rd37];
	ld.global.u32 	%rd45, [launch_index];
	mov.u64 	%rd62, in_maxt;
	cvta.global.u64 	%rd44, %rd62;
	// inline asm
	call (%rd43), _rt_buffer_get_64, (%rd44, %r18, %r16, %rd45, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f8, [%rd43];
	ld.global.u32 	%rd51, [launch_index];
	mov.u64 	%rd63, in_mask;
	cvta.global.u64 	%rd50, %rd63;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd50, %r18, %r18, %rd51, %rd54, %rd54, %rd54);
	// inline asm
	ld.u8 	%rs1, [%rd49];
	setp.eq.s16	%p1, %rs1, 0;
	@%p1 bra 	BB0_2;

	ld.global.u32 	%r19, [top_object];
	mov.u32 	%r21, 255;
	mov.u32 	%r22, 0;
	add.u64 	%rd64, %SP, 0;
	// inline asm
	call _rt_trace_mask_flags_64, (%r19, %f1, %f2, %f3, %f4, %f5, %f6, %r22, %f7, %f8, %r21, %r22, %rd64, %r18);
	// inline asm
	bra.uni 	BB0_3;

BB0_2:
	ld.global.u32 	%rd67, [launch_index];
	mov.u64 	%rd77, out_shape_ptr;
	cvta.global.u64 	%rd66, %rd77;
	mov.u32 	%r25, 8;
	// inline asm
	call (%rd65), _rt_buffer_get_64, (%rd66, %r18, %r25, %rd67, %rd54, %rd54, %rd54);
	// inline asm
	st.u64 	[%rd65], %rd54;
	ld.global.u32 	%rd73, [launch_index];
	mov.u64 	%rd78, out_t;
	cvta.global.u64 	%rd72, %rd78;
	// inline asm
	call (%rd71), _rt_buffer_get_64, (%rd72, %r18, %r16, %rd73, %rd54, %rd54, %rd54);
	// inline asm
	mov.u32 	%r28, 2139095040;
	st.u32 	[%rd71], %r28;

BB0_3:
	ret;
}

	// .globl	_Z11ray_gen_anyv
.visible .entry _Z11ray_gen_anyv(

)
{
	.local .align 1 .b8 	__local_depot1[1];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<72>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.global.u32 	%rd3, [launch_index];
	mov.u64 	%rd55, in_ox;
	cvta.global.u64 	%rd2, %rd55;
	mov.u32 	%r18, 1;
	mov.u32 	%r16, 4;
	mov.u64 	%rd54, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r18, %r16, %rd3, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f1, [%rd1];
	ld.global.u32 	%rd9, [launch_index];
	mov.u64 	%rd56, in_oy;
	cvta.global.u64 	%rd8, %rd56;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r18, %r16, %rd9, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f2, [%rd7];
	ld.global.u32 	%rd15, [launch_index];
	mov.u64 	%rd57, in_oz;
	cvta.global.u64 	%rd14, %rd57;
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd14, %r18, %r16, %rd15, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f3, [%rd13];
	ld.global.u32 	%rd21, [launch_index];
	mov.u64 	%rd58, in_dx;
	cvta.global.u64 	%rd20, %rd58;
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd20, %r18, %r16, %rd21, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f4, [%rd19];
	ld.global.u32 	%rd27, [launch_index];
	mov.u64 	%rd59, in_dy;
	cvta.global.u64 	%rd26, %rd59;
	// inline asm
	call (%rd25), _rt_buffer_get_64, (%rd26, %r18, %r16, %rd27, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f5, [%rd25];
	ld.global.u32 	%rd33, [launch_index];
	mov.u64 	%rd60, in_dz;
	cvta.global.u64 	%rd32, %rd60;
	// inline asm
	call (%rd31), _rt_buffer_get_64, (%rd32, %r18, %r16, %rd33, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f6, [%rd31];
	ld.global.u32 	%rd39, [launch_index];
	mov.u64 	%rd61, in_mint;
	cvta.global.u64 	%rd38, %rd61;
	// inline asm
	call (%rd37), _rt_buffer_get_64, (%rd38, %r18, %r16, %rd39, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f7, [%rd37];
	ld.global.u32 	%rd45, [launch_index];
	mov.u64 	%rd62, in_maxt;
	cvta.global.u64 	%rd44, %rd62;
	// inline asm
	call (%rd43), _rt_buffer_get_64, (%rd44, %r18, %r16, %rd45, %rd54, %rd54, %rd54);
	// inline asm
	ld.f32 	%f8, [%rd43];
	ld.global.u32 	%rd51, [launch_index];
	mov.u64 	%rd63, in_mask;
	cvta.global.u64 	%rd50, %rd63;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd50, %r18, %r18, %rd51, %rd54, %rd54, %rd54);
	// inline asm
	ld.u8 	%rs1, [%rd49];
	setp.eq.s16	%p1, %rs1, 0;
	@%p1 bra 	BB1_2;

	ld.global.u32 	%r19, [top_object];
	mov.u32 	%r20, 0;
	mov.u32 	%r21, 255;
	add.u64 	%rd64, %SP, 0;
	// inline asm
	call _rt_trace_mask_flags_64, (%r19, %f1, %f2, %f3, %f4, %f5, %f6, %r20, %f7, %f8, %r21, %r16, %rd64, %r18);
	// inline asm
	bra.uni 	BB1_3;

BB1_2:
	ld.global.u32 	%rd67, [launch_index];
	mov.u64 	%rd71, out_hit;
	cvta.global.u64 	%rd66, %rd71;
	// inline asm
	call (%rd65), _rt_buffer_get_64, (%rd66, %r18, %r18, %rd67, %rd54, %rd54, %rd54);
	// inline asm
	mov.u16 	%rs2, 0;
	st.u8 	[%rd65], %rs2;

BB1_3:
	ret;
}

	// .globl	_Z7ray_hitv
.visible .entry _Z7ray_hitv(

)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<38>;
	.reg .b32 	%r<47>;
	.reg .b64 	%rd<155>;


	mov.u64 	%rd6, out_hit;
	cvta.global.u64 	%rd5, %rd6;
	mov.u32 	%r2, 1;
	// inline asm
	call (%rd1, %rd2, %rd3, %rd4), _rt_buffer_get_size_64, (%rd5, %r2, %r2);
	// inline asm
	cvt.u32.u64	%r3, %rd1;
	setp.eq.s32	%p1, %r3, 0;
	@%p1 bra 	BB2_2;

	ld.global.u32 	%rd9, [launch_index];
	mov.u64 	%rd12, 0;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd5, %r2, %r2, %rd9, %rd12, %rd12, %rd12);
	// inline asm
	mov.u16 	%rs1, 1;
	st.u8 	[%rd7], %rs1;
	bra.uni 	BB2_3;

BB2_2:
	ld.global.u64 	%rd134, [shape_ptr];
	ld.global.u32 	%rd16, [launch_index];
	mov.u64 	%rd135, out_shape_ptr;
	cvta.global.u64 	%rd15, %rd135;
	mov.u32 	%r7, 8;
	mov.u64 	%rd133, 0;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd15, %r2, %r7, %rd16, %rd133, %rd133, %rd133);
	// inline asm
	st.u64 	[%rd14], %rd134;
	// inline asm
	call (%r8), _rt_get_primitive_index, ();
	// inline asm
	ld.global.u32 	%rd22, [launch_index];
	mov.u64 	%rd136, out_primitive_id;
	cvta.global.u64 	%rd21, %rd136;
	mov.u32 	%r46, 4;
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r2, %r46, %rd22, %rd133, %rd133, %rd133);
	// inline asm
	st.u32 	[%rd20], %r8;
	ld.global.f32 	%f1, [uv];
	ld.global.u32 	%rd28, [launch_index];
	mov.u64 	%rd137, out_u;
	cvta.global.u64 	%rd27, %rd137;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r2, %r46, %rd28, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd26], %f1;
	ld.global.f32 	%f2, [uv+4];
	ld.global.u32 	%rd34, [launch_index];
	mov.u64 	%rd138, out_v;
	cvta.global.u64 	%rd33, %rd138;
	// inline asm
	call (%rd32), _rt_buffer_get_64, (%rd33, %r2, %r46, %rd34, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd32], %f2;
	ld.global.f32 	%f3, [ng];
	ld.global.u32 	%rd40, [launch_index];
	mov.u64 	%rd139, out_ng_x;
	cvta.global.u64 	%rd39, %rd139;
	// inline asm
	call (%rd38), _rt_buffer_get_64, (%rd39, %r2, %r46, %rd40, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd38], %f3;
	ld.global.f32 	%f4, [ng+4];
	ld.global.u32 	%rd46, [launch_index];
	mov.u64 	%rd140, out_ng_y;
	cvta.global.u64 	%rd45, %rd140;
	// inline asm
	call (%rd44), _rt_buffer_get_64, (%rd45, %r2, %r46, %rd46, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd44], %f4;
	ld.global.f32 	%f5, [ng+8];
	ld.global.u32 	%rd52, [launch_index];
	mov.u64 	%rd141, out_ng_z;
	cvta.global.u64 	%rd51, %rd141;
	// inline asm
	call (%rd50), _rt_buffer_get_64, (%rd51, %r2, %r46, %rd52, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd50], %f5;
	ld.global.f32 	%f6, [ns];
	ld.global.u32 	%rd58, [launch_index];
	mov.u64 	%rd142, out_ns_x;
	cvta.global.u64 	%rd57, %rd142;
	// inline asm
	call (%rd56), _rt_buffer_get_64, (%rd57, %r2, %r46, %rd58, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd56], %f6;
	ld.global.f32 	%f7, [ns+4];
	ld.global.u32 	%rd64, [launch_index];
	mov.u64 	%rd143, out_ns_y;
	cvta.global.u64 	%rd63, %rd143;
	// inline asm
	call (%rd62), _rt_buffer_get_64, (%rd63, %r2, %r46, %rd64, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd62], %f7;
	ld.global.f32 	%f8, [ns+8];
	ld.global.u32 	%rd70, [launch_index];
	mov.u64 	%rd144, out_ns_z;
	cvta.global.u64 	%rd69, %rd144;
	// inline asm
	call (%rd68), _rt_buffer_get_64, (%rd69, %r2, %r46, %rd70, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd68], %f8;
	ld.global.f32 	%f9, [p];
	ld.global.u32 	%rd76, [launch_index];
	mov.u64 	%rd145, out_p_x;
	cvta.global.u64 	%rd75, %rd145;
	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd75, %r2, %r46, %rd76, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd74], %f9;
	ld.global.f32 	%f10, [p+4];
	ld.global.u32 	%rd82, [launch_index];
	mov.u64 	%rd146, out_p_y;
	cvta.global.u64 	%rd81, %rd146;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r2, %r46, %rd82, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd80], %f10;
	ld.global.f32 	%f11, [p+8];
	ld.global.u32 	%rd88, [launch_index];
	mov.u64 	%rd147, out_p_z;
	cvta.global.u64 	%rd87, %rd147;
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd87, %r2, %r46, %rd88, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd86], %f11;
	ld.global.f32 	%f12, [dp_du];
	ld.global.u32 	%rd94, [launch_index];
	mov.u64 	%rd148, out_dp_du_x;
	cvta.global.u64 	%rd93, %rd148;
	// inline asm
	call (%rd92), _rt_buffer_get_64, (%rd93, %r2, %r46, %rd94, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd92], %f12;
	ld.global.f32 	%f13, [dp_du+4];
	ld.global.u32 	%rd100, [launch_index];
	mov.u64 	%rd149, out_dp_du_y;
	cvta.global.u64 	%rd99, %rd149;
	// inline asm
	call (%rd98), _rt_buffer_get_64, (%rd99, %r2, %r46, %rd100, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd98], %f13;
	ld.global.f32 	%f14, [dp_du+8];
	ld.global.u32 	%rd106, [launch_index];
	mov.u64 	%rd150, out_dp_du_z;
	cvta.global.u64 	%rd105, %rd150;
	// inline asm
	call (%rd104), _rt_buffer_get_64, (%rd105, %r2, %r46, %rd106, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd104], %f14;
	ld.global.f32 	%f15, [dp_dv];
	ld.global.u32 	%rd112, [launch_index];
	mov.u64 	%rd151, out_dp_dv_x;
	cvta.global.u64 	%rd111, %rd151;
	// inline asm
	call (%rd110), _rt_buffer_get_64, (%rd111, %r2, %r46, %rd112, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd110], %f15;
	ld.global.f32 	%f16, [dp_dv+4];
	ld.global.u32 	%rd118, [launch_index];
	mov.u64 	%rd152, out_dp_dv_y;
	cvta.global.u64 	%rd117, %rd152;
	// inline asm
	call (%rd116), _rt_buffer_get_64, (%rd117, %r2, %r46, %rd118, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd116], %f16;
	ld.global.f32 	%f17, [dp_dv+8];
	ld.global.u32 	%rd124, [launch_index];
	mov.u64 	%rd153, out_dp_dv_z;
	cvta.global.u64 	%rd123, %rd153;
	// inline asm
	call (%rd122), _rt_buffer_get_64, (%rd123, %r2, %r46, %rd124, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd122], %f17;
	ld.global.f32 	%f18, [ray];
	ld.global.f32 	%f19, [p];
	sub.f32 	%f20, %f19, %f18;
	ld.global.f32 	%f21, [ray+4];
	ld.global.f32 	%f22, [p+4];
	sub.f32 	%f23, %f22, %f21;
	ld.global.f32 	%f24, [ray+8];
	ld.global.f32 	%f25, [p+8];
	sub.f32 	%f26, %f25, %f24;
	mul.f32 	%f27, %f23, %f23;
	fma.rn.f32 	%f28, %f20, %f20, %f27;
	fma.rn.f32 	%f29, %f26, %f26, %f28;
	ld.global.f32 	%f30, [ray+20];
	ld.global.f32 	%f31, [ray+12];
	ld.global.f32 	%f32, [ray+16];
	mul.f32 	%f33, %f32, %f32;
	fma.rn.f32 	%f34, %f31, %f31, %f33;
	fma.rn.f32 	%f35, %f30, %f30, %f34;
	div.rn.f32 	%f36, %f29, %f35;
	sqrt.rn.f32 	%f37, %f36;
	ld.global.u32 	%rd130, [launch_index];
	mov.u64 	%rd154, out_t;
	cvta.global.u64 	%rd129, %rd154;
	// inline asm
	call (%rd128), _rt_buffer_get_64, (%rd129, %r2, %r46, %rd130, %rd133, %rd133, %rd133);
	// inline asm
	st.f32 	[%rd128], %f37;

BB2_3:
	ret;
}

	// .globl	_Z8ray_missv
.visible .entry _Z8ray_missv(

)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<29>;


	mov.u64 	%rd7, out_hit;
	cvta.global.u64 	%rd6, %rd7;
	mov.u32 	%r2, 1;
	// inline asm
	call (%rd2, %rd3, %rd4, %rd5), _rt_buffer_get_size_64, (%rd6, %r2, %r2);
	// inline asm
	cvt.u32.u64	%r3, %rd2;
	setp.eq.s32	%p1, %r3, 0;
	ld.global.u32 	%rd1, [launch_index];
	@%p1 bra 	BB3_2;

	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd6, %r2, %r2, %rd1, %rd13, %rd13, %rd13);
	// inline asm
	mov.u16 	%rs1, 0;
	st.u8 	[%rd8], %rs1;
	bra.uni 	BB3_3;

BB3_2:
	mov.u64 	%rd27, out_shape_ptr;
	cvta.global.u64 	%rd16, %rd27;
	mov.u32 	%r7, 8;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd15), _rt_buffer_get_64, (%rd16, %r2, %r7, %rd1, %rd26, %rd26, %rd26);
	// inline asm
	st.u64 	[%rd15], %rd26;
	ld.global.u32 	%rd23, [launch_index];
	mov.u64 	%rd28, out_t;
	cvta.global.u64 	%rd22, %rd28;
	mov.u32 	%r9, 4;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r2, %r9, %rd23, %rd26, %rd26, %rd26);
	// inline asm
	mov.u32 	%r10, 2139095040;
	st.u32 	[%rd21], %r10;

BB3_3:
	ret;
}


